#version 430

//Workgroup size
layout(local_size_x = 64, local_size_y = 1) in;

// layout(rgba32f, binding = 0) uniform image2D colorBuffer;

layout(std430, binding = 1) buffer particleApi
{
    // Should be in the format {posX, posY, mass}
    float particles[][3];
} particleBuffer;

layout(std430, binding = 2) buffer accelApi
{
    // Should be in the format {accX, accY}
    float accel[][2];
} accelBuffer;


const float G = 10;

void main() {
    // ivec2 pixelPos = ivec2(gl_GlobalInvocationID.xy);
    // ivec2 screenSize = imageSize(colorBuffer);
    // if (pixelPos.x >= screenSize.x || pixelPos.y >= screenSize.y) return;
    
    // float apectRatio = float(screenSize.y)/screenSize.x;
    
    // DO the math thing
    float distx, disty, A, netAx, netAy, dir;
    int size = particleBuffer.particles.length();
    uint i = gl_GlobalInvocationID.x;
    netAx = 0;
    netAy = 0;
    for(int j = 0 ; j < size; ++j) {
        if (j == i) continue;

        distx = particleBuffer.particles[j][0] - particleBuffer.particles[i][0]; 
        disty = particleBuffer.particles[j][1] - particleBuffer.particles[i][1];

        if (sqrt(distx * distx + disty * disty) <= 1) continue; //Prevents division by 0
        dir = atan(disty, distx);

        A = particleBuffer.particles[j][2] / (distx * distx + disty * disty);
        netAx += A * cos(dir);
        netAy += A * sin(dir);
    }
    //Write
    accelBuffer.accel[i][0] = netAx * G;
    accelBuffer.accel[i][1] = netAy * G;
    
    // vec3 color = vec3(0.0);
    
    //write
    // imageStore(colorBuffer, pixelPos, vec4(color, 1.0));
}